#include "mbed.h"
#include <cstdio>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>


#define taille 181

//#include "bluetooth.h"
#include "car.h"

Serial PC(USBTX,USBRX, 9600);
#include "lidar.h"

struct Ensemble {
    float debut;
    float fin;
    float vide;

    float angle_debut;
    float angle_fin;

    float distance_debut;
    float distance_fin;
    float size;

};
struct datapoint {

    float angle;
    float distance;
    int ensemble;
};


float lissage(float tab[taille]);
float choix_angle(int cs,float tab[taille],struct Ensemble e1, struct Ensemble e2, struct Ensemble e3, struct Ensemble e4, struct Ensemble e5, struct Ensemble e6, struct Ensemble e7, struct Ensemble e8, struct Ensemble e9, struct Ensemble e10);


int main()
{
    initWheels();

    struct Ensemble e1 = {0,0,0};
    struct Ensemble e2 = {0,0,0};
    struct Ensemble e3 = {0,0,0};
    struct Ensemble e4 = {0,0,0};
    struct Ensemble e5 = {0,0,0};
    struct Ensemble e6 = {0,0,0};
    struct Ensemble e7 = {0,0,0};
    struct Ensemble e8 = {0,0,0};
    struct Ensemble e9 = {0,0,0};
    struct Ensemble e10 = {0,0,0};


    int i,o;
    char cs=0;
    float valeur = 0, angle_roues = 0, angle_roues_final, vitesse;
    float mem[3];

    int u=0;

    float tab[181];
datapoint tab_data[181];
    initLidar();
    //  initBLE();
    mem[0]=0;
    mem[1]=0;
    mem[2]=0;
    while (1) {
        getLidarData(tab);
        //  sendOverBluetooth(data);
for(i=1; i!=8; i++) {
        lissage(tab);
        }


datapoint CePoint;

 for(i=0; i!=taille+1; i++) {
         tab_data[i].distance = tab[i];
         tab_data[i].angle = i;
         tab_data[i].ensemble = 0;
        }//fin for(i=1; i!=taille+1; i++)
        cs = 0;
       
        for(i=1; i!=taille+1; i++) {
            valeur =((tab[i])+(tab[i+1])+0.00001)/((tab[i])*2.0+0.00001);

            if((valeur>0.8)&&(valeur<1.2)) {
                //PC.printf("tab[%d] = %lf   valeur = %lf\n\r",i,tab[i],valeur);
            } else {
                PC.printf("tab[%d] = %lf   valeur = %lf\t\tsaut ----------\n\r",i,tab[i],valeur);
            }
            e1.debut = 0;
            e1.angle_debut = 1;
            e1.distance_debut = tab[1];
           
           
valeur = ( tab_data[i].distance+0.00001 / tab_data[i-1].distance+0.00001);
           switch(cs) {



                case 0: {
                    if (!((valeur<1.5)&&(valeur>0.50))) {



                        e1.fin = i;
                        e1.angle_fin = i;
                        e1.distance_fin = tab[i];

                        e2.debut = i+1;
                        e2.angle_debut = i+1;
                        e2.distance_debut = tab[i+1];

                        cs = 1;
                    }
                    else        
                    {
                        tab_data[i].ensemble = 1;
                        e1.size += 1;
                    }
                    break;
                }

                case 1: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {


                        e2.fin = i;
                        e2.angle_fin = i;
                        e2.distance_fin = tab[i];

                        e3.debut = i+1;
                        e3.angle_debut = i+1;
                        e3.distance_debut = tab[i+1];

                        cs = 2;
                    }
                         else        
                    {
                        tab_data[i].ensemble = 2;
                        e2.size += 1;
                    }
                    break;
                }

                case 2: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {


                        e3.fin = i;
                        e3.angle_fin = i;
                        e3.distance_fin = tab[i];
                        if(i<179) {
                            e4.debut = i+1;
                            e4.angle_debut = i+1;
                            e4.distance_debut = tab[i+1];

                            cs = 3;
                        }
                    }
                         else        
                    {
                        tab_data[i].ensemble = 3;
                        e3.size += 1;
                    }
                    break;
                }

                case 3: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {


                        e4.fin = i;
                        e4.angle_fin = i;
                        e4.distance_fin = tab[i];
                        if(i<179) {
                            e5.debut = i+1;
                            e5.angle_debut = i+1;
                            e5.distance_debut = tab[i+1];


                            cs = 4;
                        }
                    }
                         else        
                    {
                        tab_data[i].ensemble = 4;
                        e4.size += 1;
                    }
                   
                    break;
                }

                case 4: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {



                        e5.fin = i;
                        e5.angle_fin = i;
                        e5.distance_fin = tab[i];
                        if(i<179) {
                            e6.debut = i+1;
                            e6.angle_debut = i+1;
                            e6.distance_debut = tab[i+1];


                            cs = 5;
                        }
                    }
                         else        
                    {
                        tab_data[i].ensemble = 5;
                        e5.size += 1;
                    }
                    break;
                }

                case 5: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {


                        e6.fin = i;
                        e6.angle_fin = i;
                        e6.distance_fin = tab[i];
                        if(i<179) {
                            e7.debut = i+1;
                            e7.angle_debut = i+1;
                            e7.distance_debut = tab[i+1];


                            cs = 6;
                        }
                    }
                         else        
                    {
                        tab_data[i].ensemble = 6;
                        e6.size += 1;
                    }
                    break;
                }

                case 6: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {



                        e7.fin = i;
                        e7.angle_fin = i;
                        e7.distance_fin = tab[i];
                        if(i<179) {
                            e8.debut = i+1;
                            e8.angle_debut = i+1;
                            e8.distance_debut = tab[i+1];


                            cs = 7;
                        }
                    }
                         else        
                    {
                        tab_data[i].ensemble = 7;
                        e7.size += 1;
                    }
                    break;
                }

                case 7: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {



                        e8.fin = i;
                        e8.angle_fin = i;
                        e8.distance_fin = tab[i];
                        if(i<179) {
                            e9.debut = i+1;
                            e9.angle_debut = i+1;
                            e9.distance_debut = tab[i+1];


                            cs = 8;
                        }
                    }
                         else        
                    {
                        tab_data[i].ensemble = 8;
                        e8.size += 1;
                    }
                    break;
                }

                case 8: {
                    if(!((valeur<1.5)&&(valeur>0.50)))  {



                        e9.fin = i;
                        e9.angle_fin = i;
                        e9.distance_fin = tab[i];

                        if(i<179) {
                            e10.debut = i+1;
                            e10.angle_debut = i+1;
                            e10.distance_debut = tab[i+1];


                            cs = 9;
                        }
                    }
                         else        
                    {
                        tab_data[i].ensemble = 9;
                        e9.size += 1;
                    }
                    break;
                }

                case 9: {
                    if (!((valeur<1.5)&&(valeur>0.50)))  {



                        e10.fin = i;
                        e10.angle_fin = i;
                        e10.distance_fin = tab[i];

                    }
                         else        
                    {
                        tab_data[i].ensemble = 10;
                        e10.size += 1;
                    }
                        break;
                   
                }
            }

        }//fin for(i=1; i!=taille+1; i++)


        angle_roues = choix_angle(cs,tab,e1, e2, e3, e4, e5,e6,e7,e8,e9,e10);
        PC.printf("\n\r\n\r         angle_roues =     %lf\n\r\n\r\n\r",choix_angle(cs,tab,e1, e2, e3, e4, e5,e6,e7,e8,e9,e10));

        mem[2]=mem[1];
        mem[1]=mem[0];
        mem[0]=angle_roues ;

        angle_roues_final = ( mem[2] + mem[1] + mem[0] ) /3.0;

        turn(angle_roues_final);
        cs = 0;










    }//fin while

    return 0;

} //fin main ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


float lissage(float tab[taille])
{

    int i=0;
    float valeur2;

    if(tab[0]>150)tab[0]=-1;

    for(i=1; i<=taille; i++) { //lissage
        //tab[i]=tab[i] * (asin ( (double)i ));  //projection


        if(tab[i]>150)tab[i]=-1; //bride


        valeur2 = ((tab[i-1]+0.00001)/(tab[i+1]+0.00001));
        if ((((tab[i]+0.00001)/(tab[i+1]+0.00001))>1.05) || (((tab[i]+0.00001)/(tab[i+1]+0.00001))<0.95)) {
            if (((valeur2<1.5)&(valeur2>0.5))) {
                tab[i] = tab[i-1];
                //   PC.printf("%lf\n\r",tab[i]);
               
                 //PC.printf("tab[%d] = %lf\t  tab[%d]= %lf\t tab[%d] = %lf\n\r",i-1,tab[i-1],i+1,tab[i+1],i,tab[i]);
            }
        }
    }
}

float choix_angle(int cs,float tab[taille],struct Ensemble e1, struct Ensemble e2, struct Ensemble e3, struct Ensemble e4, struct Ensemble e5, struct Ensemble e6, struct Ensemble e7, struct Ensemble e8, struct Ensemble e9, struct Ensemble e10)
{
    int e1_vide = 0,e2_vide = 0,e3_vide = 0,e4_vide = 0,e5_vide = 0,e6_vide = 0,e7_vide = 0,e8_vide = 0,e9_vide = 0,e10_vide = 0;
    int a=0,i;
    float result;
    cs +=1;

    if(tab[(int)(((int)e1.angle_fin-(int)e1.angle_debut)/2.0+(int)e1.angle_debut)] == -1) {
        e1_vide = 1;
    }
    if(tab[(int)(((int)e2.angle_fin-(int)e2.angle_debut)/2.0+(int)e2.angle_debut)] == -1) {
        e2_vide = 1;
    }
    if(tab[(int)(((int)e3.angle_fin-(int)e3.angle_debut)/2.0+(int)e3.angle_debut)] == -1) {
        e3_vide = 1;
    }
    if(tab[(int)(((int)e4.angle_fin-(int)e4.angle_debut)/2.0+(int)e4.angle_debut)] == -1) {
        e4.vide = 1;
    }
    if(tab[(int)(((int)e5.angle_fin-(int)e5.angle_debut)/2.0+(int)e5.angle_debut)] == -1) {
        e5_vide = 1;
    }
    if(tab[(int)(((int)e6.angle_fin-(int)e6.angle_debut)/2.0+(int)e6.angle_debut)] == -1) {
        e6.vide = 1;
    }
    if(tab[(int)(((int)e7.angle_fin-(int)e7.angle_debut)/2.0+(int)e7.angle_debut)] == -1) {
        e7.vide = 1;
    }
    if(tab[(int)(((int)e8.angle_fin-(int)e8.angle_debut)/2.0+(int)e8.angle_debut)] == -1) {
        e8_vide = 1;
    }
    if(tab[(int)(((int)e9.angle_fin-(int)e9.angle_debut)/2.0+(int)e9.angle_debut)] == -1) {
        e9_vide = 1;
    }
    if(tab[(int)(((int)e10.angle_fin-(int)e10.angle_debut)/2.0+(int)e10.angle_debut)] == -1) {
        e10_vide = 1;
    }

    e1_vide *= ((int)e1.angle_fin-(int)e1.angle_debut);
    e2_vide *= ((int)e2.angle_fin-(int)e2.angle_debut);
    e3_vide *= ((int)e3.angle_fin-(int)e3.angle_debut);
    e4_vide *= ((int)e4.angle_fin-(int)e4.angle_debut);
    e5_vide *= ((int)e5.angle_fin-(int)e5.angle_debut);
    e6_vide *= ((int)e6.angle_fin-(int)e6.angle_debut);
    e7_vide *= ((int)e7.angle_fin-(int)e7.angle_debut);
    e8_vide *= ((int)e8.angle_fin-(int)e8.angle_debut);
    e9_vide *= ((int)e9.angle_fin-(int)e9.angle_debut);
    e10_vide*= ((int)e10.angle_fin-(int)e10.angle_debut);
//PC.printf("result = %lf \n\r",result);
    for(i=0; i != 10; i++) {
        switch(a) {
            case 0: {
                if ((e1_vide > e2_vide )&&(e1_vide > e3_vide)&&(e1_vide > e4_vide)&&(e1_vide > e5_vide)&&(e1_vide > e6_vide )&&(e1_vide > e7_vide)&&(e1_vide > e8_vide)&&(e1_vide > e9_vide)&&(e1_vide > e10_vide)) {
                    result = (e1.angle_fin - e1.angle_debut)/2.0+ e1.angle_debut;
                } else {
                    a = 1;
                }
                break;
            }
            case 1: {
                if ((e2_vide > e1_vide )&&(e2_vide > e3_vide)&&(e2_vide > e4_vide)&&(e2_vide > e5_vide)&&(e2_vide > e6_vide )&&(e2_vide > e7_vide)&&(e2_vide > e8_vide)&&(e2_vide > e9_vide)&&(e2_vide > e10_vide)) {
                    result = (e2.angle_fin - e2.angle_debut)/2.0+ e2.angle_debut;
                } else  {
                    a = 2;
                }
                break;
            }
            case 2: {
                if ((e3_vide > e1_vide )&&(e3_vide > e2_vide)&&(e3_vide > e4_vide)&&(e3_vide > e5_vide)&&(e3_vide > e6_vide )&&(e3_vide > e7_vide)&&(e3_vide > e8_vide)&&(e3_vide > e9_vide)&&(e3_vide > e10_vide)) {
                    result = (e3.angle_fin - e3.angle_debut)/2.0+ e3.angle_debut;
                } else {
                    a = 3;
                }
                break;
            }
            case 3: {
                if ((e4_vide > e1_vide )&&(e4_vide > e2_vide)&&(e4_vide > e3_vide)&&(e4_vide > e5_vide)&&(e4_vide > e6_vide )&&(e4_vide > e7_vide)&&(e4_vide > e8_vide)&&(e4_vide > e9_vide)&&(e4_vide > e10_vide)) {
                    result = (e4.angle_fin - e4.angle_debut)/2.0+ e4.angle_debut;
                } else {
                    a = 4;
                }
                break;
            }
            case 4: {
                if ((e5_vide > e1_vide )&&(e5_vide > e2_vide)&&(e5_vide > e3_vide)&&(e5_vide > e4_vide)&&(e5_vide > e6_vide )&&(e5_vide > e7_vide)&&(e5_vide > e8_vide)&&(e5_vide > e9_vide)&&(e5_vide > e10_vide)) {
                    result = (e5.angle_fin - e5.angle_debut)/2.0+ e5.angle_debut;
                } else {
                    a = 5;
                }
                break;
            }
            case 5: {
                if ((e6_vide > e1_vide )&&(e6_vide > e2_vide)&&(e6_vide > e3_vide)&&(e6_vide > e4_vide)&&(e6_vide > e5_vide )&&(e6_vide > e7_vide)&&(e6_vide > e8_vide)&&(e6_vide > e9_vide)&&(e6_vide > e10_vide)) {
                    result = (e6.angle_fin - e6.angle_debut)/2.0+ e6.angle_debut;
                } else {
                    a = 6;
                }
                break;
            }
            case 6: {
                if ((e7_vide > e1_vide )&&(e7_vide > e2_vide)&&(e7_vide > e3_vide)&&(e7_vide > e4_vide)&&(e7_vide > e5_vide )&&(e7_vide > e6_vide)&&(e7_vide > e8_vide)&&(e7_vide > e9_vide)&&(e7_vide > e10_vide)) {
                    result = (e7.angle_fin - e7.angle_debut)/2.0+ e7.angle_debut;
                } else {
                    a = 7;
                }
                break;
            }
            case 7: {
                if ((e8_vide > e1_vide )&&(e8_vide > e2_vide)&&(e8_vide > e3_vide)&&(e8_vide > e4_vide)&&(e8_vide > e5_vide )&&(e8_vide > e6_vide)&&(e8_vide > e7_vide)&&(e8_vide > e9_vide)&&(e8_vide > e10_vide)) {
                    result = (e8.angle_fin - e8.angle_debut)/2.0+ e8.angle_debut;
                } else {
                    a = 8;
                }
                break;
            }
            case 8: {
                if ((e9_vide > e1_vide )&&(e9_vide > e2_vide)&&(e9_vide > e3_vide)&&(e9_vide > e4_vide)&&(e9_vide > e5_vide )&&(e9_vide > e6_vide)&&(e9_vide > e7_vide)&&(e9_vide > e8_vide)&&(e9_vide > e10_vide)) {
                    result = (e9.angle_fin - e9.angle_debut)/2.0+ e9.angle_debut;
                } else {
                    a = 9;
                }
                break;
            }
            case 9: {
                if ((e10_vide > e1_vide )&&(e10_vide > e2_vide)&&(e10_vide > e3_vide)&&(e10_vide > e4_vide)&&(e10_vide > e5_vide )&&(e10_vide > e6_vide)&&(e10_vide > e7_vide)&&(e10_vide > e8_vide)&&(e10_vide > e9_vide)) {
                    result = (e10.angle_fin - e10.angle_debut)/2.0+ e10.angle_debut;
                }
                break;
            }
        }
    }

    if (result < 90.0) {
        result =  90.0 - result;
        result = -result ;
    }

    if (result == 90.0) {
        result = 0;
    }

    if (result > 90.0) {
        result =   result - 90.0 ;
    }

    PC.printf("\n\n\re1_vide %lf\n\re2_vide %lf\n\re3_vide %lf\n\re4_vide %lf\n\re5_vide %lf\n\re6_vide %lf\n\re7_vide %lf\n\re8_vide %lf\n\re9_vide %lf\n\re10_vide %lf\n\r",e1_vide,e2_vide,e3_vide,e4_vide, e5_vide, e6_vide,e7_vide,e8_vide,e9_vide,e10_vide);

    return result;
}




