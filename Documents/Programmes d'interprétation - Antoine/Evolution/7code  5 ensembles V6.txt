#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define taille 181


#define angle_g 30
#define angle_d -30
#define angle_t 0


float ligne_droite(float tab[taille]);
float multiverse(float tab[taille]);
float lissage(float tab[taille]);
int longueur(int a,int b,float tab[taille]);

void affiche_ensembles(int nb,int a,int b,int c,int d,int e,int f);

int val_max(int a, int b,int c,int d,int e);

int main(void)
    {

    int distance_cap_g = 40, distance_cap_d = 50, distance_cap_t = 50;
    double v= 8.1;             // 8% = 0              3,2 = rapide
    double angle;         // min 6,3  droite      max = 9     gauche

    int ensemble_0= 0,ensemble_1=777, ensemble_2=777, ensemble_3=777, ensemble_4=777,ensemble_5=777,i;
    char cs=0, count = 0;
    int vide_origine, vide_fin,vide_origine1, vide_fin1,vide_origine2, vide_fin2,vide_origine3, vide_fin3;
    int vide_origine4, vide_fin4,vide_origine5, vide_fin5,verif=0, signe;

    int largeur_vide1=0,largeur_vide2=0,largeur_vide3=0,largeur_vide4=0,largeur_vide5=0;

    int long1 =0,long2 =0,long3 =0,long4 =0,long5 =0;

    float valeur,x,y;

    double angle_roues;

    float tab[taille],test[taille];

while(1){


{ // test capteurs infra




/*
        printf("distance_cap_g = ");
        scanf("%d",&distance_cap_g);


        printf("distance_cap_d = ");
        scanf("%d",&distance_cap_d);


        printf("distance_cap_t = ");
        scanf("%d",&distance_cap_t);

        if(distance_cap_d > 200){distance_cap_d = 200;}
        if(distance_cap_t > 200){distance_cap_t = 200;}
        if(distance_cap_g > 200){distance_cap_g = 200;}




        printf("\n\n\n");

        printf("distance_cap_g = %d\t\tdistance_cap_t = %d\t\tdistance_cap_d = %d\n",distance_cap_g,distance_cap_t,distance_cap_d);

        if(((distance_cap_g >= 50)&(distance_cap_d >= 50))&(distance_cap_t >= 50)){
            angle = 7.6;            //tout droit


            printf("\nv = vmax =%lf\n\n",v);

        }


        if(((distance_cap_g < 50)&(distance_cap_d >= 50))&(distance_cap_t >= 50)){              //obstacle a gauche
            printf("\n\tobstacle a gauche a une distance de %d\n",distance_cap_g);
            if((distance_cap_g < 50)&(distance_cap_t < 50)){
                printf("\n\n\tla faut vraiment tourner a droite\n\n");                //6,3  droite
                angle = 6.3;
            }
            else{
                printf("\n\n\tla faut tourner legerement a droite\n\n");                //6,9  droite
                angle = 6.9;
            }


        }


        if(((distance_cap_g >= 50)&(distance_cap_d >= 50))&(distance_cap_t < 50)){              //obstacle a droite
            printf("\n\tobstacle a droite a une distance de %d\n",distance_cap_d);
            if((distance_cap_d < 50)&(distance_cap_t < 50)){
                printf("\n\n\tla faut vraiment tourner a gauche\n\n");                //8.9  gauche
                angle = 8.9;
            }
            else{
                printf("\n\n\tla faut tourner legerement a gauche\n\n");              //7.9  gauche
                angle = 7.9;

            }

        }
printf("\nangle = %lf\n\n",angle);
v = ((9 - angle)/2.7)*4.8   ;                  //(9 - angle) compris entre 0 et 2,7
printf("\n\n\n\n%lf\n\n\n\n",v);
}
*/
}

    //ligne_droite(tab);
    multiverse(tab);

lissage(tab);


        for(i=1; i!=taille; i++){      // Visualisation de l'environnement en ensembles "continue"

                valeur =((tab[i])/(tab[i+1]));

                //printf("i = %d\t\t\t tab i = %lf\t\t valeur = %lf",i,tab[i], valeur);
                switch(verif)
                {
                case 1:{
                    largeur_vide1+=1;
                    if(tab[i] != -1){vide_fin1=i;verif =2;}

                    long1 =longueur(vide_origine1,vide_fin1,tab);

                    break;}

                case 3:{
                    largeur_vide2+=1;
                    if(tab[i] != -1){vide_fin2=i;verif =4;}

                    long2 = longueur(vide_origine2,vide_fin2,tab);
                    break;}

                case 5:{
                    largeur_vide3+=1;
                    if(tab[i] != -1){vide_fin3=i;verif =6;}

                    long3 = longueur(vide_origine3,vide_fin3,tab);

                    break;}

                case 7:{
                    largeur_vide4+=1;
                    if(tab[i] != -1){vide_fin4=i;verif =8;}

                    long4 =longueur(vide_origine4,vide_fin4,tab);

                    break;}

                case 9:{
                    largeur_vide5+=1;
                    if(tab[i] != -1){vide_fin5=i;verif =10;}

                    long5 = longueur(vide_origine5,vide_fin5,tab);
                    break;}
                }

                //printf("\t%d \t%d \t%d \t%d \t%d",largeur_vide1,largeur_vide2,largeur_vide3,largeur_vide4,largeur_vide5);

                if (tab[i] == -1){
                    //printf("                 vide");
                    switch(verif) {
                        case 0:
                        {
                            vide_origine1=i;verif =1;break;
                        }
                        case 2:
                        {
                            vide_origine2=i;verif =3;break;
                        }
                        case 4:
                        {
                            vide_origine3=i;verif =5;break;
                        }
                        case 6:
                        {
                            vide_origine4=i;verif =7;break;
                        }
                        case 8:
                        {
                            vide_origine5=i;verif =9;break;
                        } }


                    }

 // printf("\n");
                switch(cs){

                case 0:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_1 = i;
                        cs = 1;}
                    break;}

                case 1:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_2 = i;
                        cs = 2;}
                    break;}

                case 2:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_3 = i;
                        cs = 3;}
                    break;}

                case 3:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_4 = i;
                        cs = 4;}
                    break;}

                case 4:{
                    if(!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_5 = i;
                        cs = 5;}
                    break;}

                case 5:{

                    break;}

                }

        }


        for(i=0;i!=4;i++)
        {
            switch(count)
            {
                case 0:{
                    if ((largeur_vide1 > largeur_vide2 )&&(largeur_vide1 > largeur_vide3)&&(largeur_vide1 > largeur_vide4)&&(largeur_vide1 > largeur_vide5))
                        {vide_origine = vide_origine1;vide_fin = vide_fin1;}
                    else{count = 1;}
                    break;}
                case 1:{
                    if ((largeur_vide2 > largeur_vide1 )&&(largeur_vide2 > largeur_vide3)&&(largeur_vide2 > largeur_vide4)&&(largeur_vide2 > largeur_vide5))
                        {vide_origine = vide_origine2;vide_fin = vide_fin2;}
                    else{count = 2;}
                    break;}
                case 2:{
                    if ((largeur_vide3 > largeur_vide1)&&(largeur_vide3 > largeur_vide2)&&(largeur_vide3 > largeur_vide4)&&(largeur_vide3 > largeur_vide5))
                        {vide_origine = vide_origine3;vide_fin = vide_fin3;}
                    else{count = 3;}
                    break;}
                case 3:{
                    if ((largeur_vide4 > largeur_vide1)&&(largeur_vide4 > largeur_vide2)&&(largeur_vide4 > largeur_vide3)&&(largeur_vide4 > largeur_vide5))
                        {vide_origine = vide_origine4;vide_fin = vide_fin4;}
                    else{count = 4;}
                    break;}
                case 4:{
                    if ((largeur_vide5 > largeur_vide1)&&(largeur_vide5 > largeur_vide2)&&(largeur_vide5 > largeur_vide3)&&(largeur_vide5 > largeur_vide4))
                        {vide_origine = vide_origine5;vide_fin = vide_fin5;}
                    break;}
                case 5:{

                    break;}
                case 6:{

                    break;}

            }
        }


        //affiche_ensembles(cs,ensemble_0,ensemble_1, ensemble_2, ensemble_3, ensemble_4,ensemble_5);

        x =  (tab[vide_origine-1] - tab[vide_fin]);
        y = (vide_fin + vide_origine)/2;

    //    printf("\n(vide_fin ( %d ) + vide_origine ( %d ) )/2= %d \n",vide_fin,vide_origine,(vide_fin + vide_origine)/2);

        if (((vide_fin + vide_origine)/2)<90){
                signe=-1;
    //            printf("%d < 90 \t signe = %d\n",((vide_fin + vide_origine)/2),signe);
                }
        else {
            signe=1;
    //        printf("%d > 90 \t signe = %d\n",((vide_fin + vide_origine)/2),signe);
                }

        angle_roues = ((90 - (((asin(y/(sqrt(x*x + y*y))))*360)/(2*3.141592653589)))*signe);

 //     printf("\nangle des roues = %lf \n",angle_roues);
//printf("\n\n1 %d\n\n2 %d\n\n3 %d\n\n4 %d\n\n5 %d",long1,long2,long3,long4,long5);

    }
    return 0;
}


float ligne_droite(float tab[taille]){
    int i;
    for(i=0; i!=taille;i++)
        {
        if((i >= 50)&&(i<=130))
            {tab[i] =-1;}
        else {
            if (i<50)
                {tab[i] =  1*i +1 +100;}
            if (i> taille-1 -50)
                {tab[i] = taille- i + 100;}

            }
        //printf("i=%d    %lf\n",i,tab[i]);
        //printf("        %d\n",i);
        }
    }

float multiverse(float tab[taille]){
    int i;
    for(i=0; i!=taille;i++)
        {
        if(((i >= 50)&&(i<=60))||((i >= 110)&&(i<=150)))
            {tab[i] =-1;}
        else {
            if (i<50)
                {tab[i] =  i +1 +100;}
            if ((i>60)&&(i < 110))
                {tab[i] =  140;}
            if (i> 150)
                {tab[i] = taille- i + 100;}

            }
    //   printf("i = %d\t\t tab[i] = %lf\n",i,tab[i]);

        }
    }

void affiche_ensembles(int nb,int a,int b,int c,int d,int e,int f){

    printf("il y a [ %d ] ensembles :\n\n",nb);

        printf("\n");
    if (nb == 1) {
         printf("ensemble 1 de i = %d a i = %d\n",a,b);}
    if (nb == 2) {
        printf("ensemble 1 de i = %d a i = %d\n",a,b);
        printf("ensemble 2 de i = %d a i = %d\n",b,c);}
    if (nb == 3) {
        printf("ensemble 1 de i = %d a i = %d\n",a,b);
        printf("ensemble 2 de i = %d a i = %d\n",b,c);
        printf("ensemble 3 de i = %d a i = %d\n",c,d);}
    if (nb == 4) {
        printf("ensemble 1 de i = %d a i = %d\n",a,b);
        printf("ensemble 2 de i = %d a i = %d\n",b,c);
        printf("ensemble 3 de i = %d a i = %d\n",c,d);
        printf("ensemble 4 de i = %d a i = %d\n",d,e);}
    if (nb == 5) {
        printf("ensemble 1 de i = %d a i = %d\n",a,b);
        printf("ensemble 2 de i = %d a i = %d\n",b,c);
        printf("ensemble 3 de i = %d a i = %d\n",c,d);
        printf("ensemble 4 de i = %d a i = %d\n",d,e);
        printf("ensemble 5 de i = %d a i = %d\n",e,f);}


        printf("\n");
}

int val_max(int a, int b,int c,int d,int e){
    int x,y,z,result;

    if(a<b){x=b;}
    else{x=a;}

    if(c<d){y=d;}
    else{y=c;}

    if(x>y){z=x;}
    else{z=y;}

    if(z<e){return e;}
    else{return z;}
}

int longueur(int a,int b,float tab[taille]){

return pow(  ((cos(a)*tab[a])-(cos(b)*tab[b])) * ((cos(a)*tab[a])-(cos(b)*tab[b]))  +  (a-b) * (a-b),0.5);
}
float lissage(float tab[taille]){

             int i;
             float valeur2;

             tab[i]=tab[i] * (asin ( i ));  //projection



             //printf("tab[i]\t\t\ttab[i-1]\t\t\ttab[i+1]\t\t\tvaleur2 \n\n\n");
            for(i=1; i!=taille; i++)  //lissage
            {
            //printf("%lf", tab[i]);
            if (i >=1)
                {
                //printf("\t\t%lf\t\t\t%lf\t\t\t%lf ", tab[i-1], tab[i+1], valeur2);
                valeur2 = ((tab[i-1])/(tab[i+1]));
                if (((valeur2<1.05)&&(valeur2>0.95)))
                {
                        tab[i] = ((tab[i-1])+(tab[i+1]))/2;
                        //printf("\t calcul = ((tab[i-1])+(tab[i+1]))/2 = %lf\n",((tab[i-1])+(tab[i+1]))/2);
                }
                else{
                        //printf("\t///////////////////////////////////////\n");

                }

                }
            //printf("\n");
            }

}
