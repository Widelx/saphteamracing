#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define taille 181


struct dataPoints{

float angle;
    float distance;

};
struct Ensemble{
float debut;
float fin;
    int vide;

float angle_debut;
float angle_fin;

    float distance_debut;
float distance_fin;


};e1,e2,e3,e4,e5,e6;

const char* filename = "input.txt";
void affiche_ensembles(int nb,int a,int b,int c,int d,int e,int f);
void affiche_ensembles2(int nb, struct Ensemble e1, struct Ensemble e2, struct Ensemble e3, struct Ensemble e4, struct Ensemble e5, struct Ensemble e6 , struct Ensemble e7, struct Ensemble e8, struct Ensemble e9, struct Ensemble e10);
float ligne_droite(float tab[taille]);
float multiverse(float tab[taille]);
float lissage(float tab[taille]);
int longueur(int a,int b,float tab[taille]);
int val_max(int a, int b,int c,int d,int e);
float choix_angle(float tab[taille],struct Ensemble e1, struct Ensemble e2, struct Ensemble e3, struct Ensemble e4, struct Ensemble e5, struct Ensemble e6 , struct Ensemble e7, struct Ensemble e8, struct Ensemble e9, struct Ensemble e10);



int main(int argc, char *argv[])
{
    struct Ensemble e1 = {0,0,0};
    struct Ensemble e2 = {0,0,0};
    struct Ensemble e3 = {0,0,0};
    struct Ensemble e4 = {0,0,0};
    struct Ensemble e5 = {0,0,0};
    struct Ensemble e6 = {0,0,0};
    struct Ensemble e7 = {0,0,0};
    struct Ensemble e8 = {0,0,0};
    struct Ensemble e9 = {0,0,0};
    struct Ensemble e10 = {0,0,0};

    double v= 8.1;             // 8% = 0              3,2 = rapide
    double angle;         // min 6,3  droite      max = 9     gauche

    int ensemble_0= 0,ensemble_1=777, ensemble_2=777, ensemble_3=777, ensemble_4=777,ensemble_5=777,i;
    char cs=0, count = 0;
    int vide_origine, vide_fin,vide_origine1, vide_fin1,vide_origine2, vide_fin2,vide_origine3, vide_fin3;
    int vide_origine4, vide_fin4,vide_origine5, vide_fin5,verif=0, signe;

    int largeur_vide1=0,largeur_vide2=0,largeur_vide3=0,largeur_vide4=0,largeur_vide5=0;

    int long1 =0,long2 =0,long3 =0,long4 =0,long5 =0;


    float valeur = 0,x,y;

    float angle_roues;

    //float tab[taille],test[taille];


    float tab[taille];
    int u=0;
    FILE *in_file = fopen(filename, "r");

    struct stat sb;
    stat(filename, &sb);

    char *file_contents = malloc(sb.st_size);

    while (fscanf(in_file, "%[^\n] ", file_contents) != EOF)
    {
        //printf("%s\n", file_contents);
        tab[u] =  atof(file_contents);
        //printf("tab[i]=%d\n\n",tab[i]);
        u++;
    }

    fclose(in_file);

 // for(i=0;i!=u;i++) {printf("tab[%d]=%lf\n\n",i,tab[i]);}

while(1)
    {
//getchar();

    //ligne_droite(tab);

   lissage(tab);


        for(i=1; i!=taille; i++){      // Visualisation de l'environnement en ensembles "continue"

                valeur =((tab[i])/(tab[i+1]));

                switch(verif)
                {
                case 1:{
                    largeur_vide1+=1;
                    if(tab[i] != -1){vide_fin1=i;verif =2;}

                    long1 =longueur(vide_origine1,vide_fin1,tab);

                    break;}

                case 3:{
                    largeur_vide2+=1;
                    if(tab[i] != -1){vide_fin2=i;verif =4;}

                    long2 = longueur(vide_origine2,vide_fin2,tab);
                    break;}

                case 5:{
                    largeur_vide3+=1;
                    if(tab[i] != -1){vide_fin3=i;verif =6;}

                    long3 = longueur(vide_origine3,vide_fin3,tab);

                    break;}

                case 7:{
                    largeur_vide4+=1;
                    if(tab[i] != -1){vide_fin4=i;verif =8;}

                    long4 =longueur(vide_origine4,vide_fin4,tab);

                    break;}

                case 9:{
                    largeur_vide5+=1;
                    if(tab[i] != -1){vide_fin5=i;verif =10;}

                    long5 = longueur(vide_origine5,vide_fin5,tab);
                    break;}
                }



                if (tab[i] == -1){

                    switch(verif) {
                        case 0:
                        {
                            vide_origine1=i;verif =1;break;
                        }
                        case 2:
                        {
                            vide_origine2=i;verif =3;break;
                        }
                        case 4:
                        {
                            vide_origine3=i;verif =5;break;
                        }
                        case 6:
                        {
                            vide_origine4=i;verif =7;break;
                        }
                        case 8:
                        {
                            vide_origine5=i;verif =9;break;
                        } }


                    }

                e1.debut = 0;
                e1.angle_debut = 1;
                e1.distance_debut = tab[1];

                switch(cs){

                case 0:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_1 = i;

                        e1.fin = i;
                        e1.angle_fin = i;
                        e1.distance_fin = tab[i];

                        e2.debut = i+1;
                        e2.angle_debut = i+1;
                        e2.distance_debut = tab[i+1];

                        cs = 1;}
                    break;}

                case 1:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_2 = i;

                        e2.fin = i;
                        e2.angle_fin = i;
                        e2.distance_fin = tab[i];

                        e3.debut = i+1;
                        e3.angle_debut = i+1;
                        e3.distance_debut = tab[i+1];

                        cs = 2;}
                    break;}

                case 2:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_3 = i;

                        e3.fin = i;
                        e3.angle_fin = i;
                        e3.distance_fin = tab[i];
                    if(i<179)
                            {
                        e4.debut = i+1;
                        e4.angle_debut = i+1;
                        e4.distance_debut = tab[i+1];

                        cs = 3;}}
                    break;}

                case 3:{
                    if (!((valeur<1.05)&&(valeur>0.95))){
                        ensemble_4 = i;

                        e4.fin = i;
                        e4.angle_fin = i;
                        e4.distance_fin = tab[i];
                    if(i<179)
                            {
                        e5.debut = i+1;
                        e5.angle_debut = i+1;
                        e5.distance_debut = tab[i+1];


                        cs = 4;}}
                    break;}

                case 4:{
                    if(!((valeur<1.05)&&(valeur>0.95))){

                        ensemble_5 = i;

                        e5.fin = i;
                        e5.angle_fin = i;
                        e5.distance_fin = tab[i];
                    if(i<179)
                            {
                        e6.debut = i+1;
                        e6.angle_debut = i+1;
                        e6.distance_debut = tab[i+1];


                        cs = 5;}}
                    break;}

                case 5:{
                   if(!((valeur<1.05)&&(valeur>0.95))){



                        e6.fin = i;
                        e6.angle_fin = i;
                        e6.distance_fin = tab[i];
                    if(i<179)
                            {
                        e7.debut = i+1;
                        e7.angle_debut = i+1;
                        e7.distance_debut = tab[i+1];


                        cs = 6;}}
                    break;}
                case 6:{
                   if(!((valeur<1.05)&&(valeur>0.95))){



                        e7.fin = i;
                        e7.angle_fin = i;
                        e7.distance_fin = tab[i];
                    if(i<179)
                            {
                        e8.debut = i+1;
                        e8.angle_debut = i+1;
                        e8.distance_debut = tab[i+1];


                        cs = 7;}}
                    break;}

                case 7:{
                   if(!((valeur<1.05)&&(valeur>0.95))){



                        e8.fin = i;
                        e8.angle_fin = i;
                        e8.distance_fin = tab[i];
                    if(i<179)
                            {
                        e9.debut = i+1;
                        e9.angle_debut = i+1;
                        e9.distance_debut = tab[i+1];


                        cs = 8;}}
                    break;}
                case 8:{
                   if(!((valeur<1.05)&&(valeur>0.95))){



                        e9.fin = i;
                        e9.angle_fin = i;
                        e9.distance_fin = tab[i];

                    if(i<179)
                            {
                        e10.debut = i+1;
                        e10.angle_debut = i+1;
                        e10.distance_debut = tab[i+1];


                        cs = 9;}}
                    break;}
                case 9:{
                   if(!((valeur<1.05)&&(valeur>0.95))){



                        e10.fin = i;
                        e10.angle_fin = i;
                        e10.distance_fin = tab[i];


                    break;}}
                }

        }





affiche_ensembles(cs,ensemble_0,ensemble_1, ensemble_2, ensemble_3, ensemble_4,ensemble_5);
affiche_ensembles2(cs, e1, e2, e3, e4, e5 ,e6,e7,e8,e9,e10); //cs est le nb d'ensemble
/*
printf("Ensemble e1\n\n");
printf("\t\tangle debut = %lf\t\t---------\t distance = %lf\n",e1.angle_debut, e1.distance_debut);
printf("\t\tangle fin   = %lf\t\t---------\t distance = %lf\n\n",e1.angle_fin, e1.distance_fin);

printf("Ensemble e2\n\n");
printf("\t\tangle debut = %lf\t\t---------\t distance = %lf\n",e2.angle_debut, e2.distance_debut);
printf("\t\tangle fin   = %lf\t\t---------\t distance = %lf\n\n",e2.angle_fin, e2.distance_fin);

printf("Ensemble e3\n\n");
printf("\t\tangle debut = %lf\t\t---------\t distance = %lf\n",e3.angle_debut, e3.distance_debut);
printf("\t\tangle fin   = %lf\t---------\t distance = %lf\n\n",e3.angle_fin, e3.distance_fin);

        x =  (tab[vide_origine] - tab[vide_fin]);
        y = (vide_fin + vide_origine)/2.0;
        printf("x = %lf\t y = %lf\n",x,y);


        if (((vide_fin + vide_origine)/2.0)<90.0){signe=-1.0;}
        else{signe=1.0;}

        angle_roues = ((90.0 - (((asin(y/(sqrt( x * x + y*y))))*360.0)/(2.0*3.141592653589)))*signe);
 */




angle_roues = choix_angle(tab,e1, e2, e3, e4, e5 ,e6,e7,e8,e9,e10);
 printf("\n\nangle_roues = %lf\n",angle_roues);

      getchar();

        count = 0;
        cs = 0;
        verif = 0;
/*
        for(i=1; i!=taille; i++)
        {
            tab[i] = tab[i-1];
        }
*/

}
   return 0;
}



void affiche_ensembles(int nb,int a,int b,int c,int d,int e,int f){


}

void affiche_ensembles2(int nb,struct Ensemble e1, struct Ensemble e2, struct Ensemble e3, struct Ensemble e4, struct Ensemble e5, struct Ensemble e6 , struct Ensemble e7, struct Ensemble e8, struct Ensemble e9, struct Ensemble e10){


        printf("\nensemble e1 \tde i = %lf\t a i = %lf",e1.debut,e1.fin);
        printf("\nensemble e2 \tde i = %lf\t a i = %lf",e2.debut,e2.fin);
        printf("\nensemble e3 \tde i = %lf\t a i = %lf",e3.debut,e3.fin);
        printf("\nensemble e4 \tde i = %lf\t a i = %lf",e4.debut,e4.fin);
        printf("\nensemble e5 \tde i = %lf\t a i = %lf",e5.debut,e5.fin);
        printf("\nensemble e6 \tde i = %lf\t a i = %lf",e6.debut,e6.fin);
        printf("\nensemble e7 \tde i = %lf\t a i = %lf",e7.debut,e7.fin);
        printf("\nensemble e8 \tde i = %lf\t a i = %lf",e8.debut,e8.fin);
        printf("\nensemble e9 \tde i = %lf\t a i = %lf",e9.debut,e9.fin);
        printf("\nensemble e10 \tde i = %lf\t a i = %lf\n\n",e10.debut,e10.fin);



        printf("\n\n\n");
}

int longueur(int a,int b,float tab[taille]){

return pow(  ((cos(a)*tab[a])-(cos(b)*tab[b])) * ((cos(a)*tab[a])-(cos(b)*tab[b]))  +  (a-b) * (a-b),0.5);
}

float lissage(float tab[taille]){

             int i;
             float valeur2;

             tab[i]=tab[i] * (asin ( i ));  //projection



             printf("tab[i]\t\t\ttab[i-1]\t\t\ttab[i+1]\t\t\tvaleur2 \n\n\n");
            for(i=1; i!=taille; i++)  //lissage
            {
           printf("%lf", tab[i]);
            if (i >=1)
                {
               printf("\t\t%lf\t\t\t%lf\t\t\t%lf ", tab[i-1], tab[i+1], valeur2);
                valeur2 = ((tab[i-1])/(tab[i+1]));
                if (((valeur2<1.05)&&(valeur2>0.95)))
                {
                        tab[i] = ((tab[i-1])+(tab[i+1]))/2.0;
                       printf("\t calcul = ((tab[i-1])+(tab[i+1]))/2 = %lf\n",((tab[i-1])+(tab[i+1]))/2);
                }
                else{
                       printf("\t///////////////////////////////////////\n");

                }

                }
         printf("\n");
            }

}

float choix_angle(float tab[taille],struct Ensemble e1, struct Ensemble e2, struct Ensemble e3, struct Ensemble e4, struct Ensemble e5, struct Ensemble e6 , struct Ensemble e7, struct Ensemble e8, struct Ensemble e9, struct Ensemble e10)
{


    int e1_vide = 0,e2_vide = 0,e3_vide = 0,e4_vide = 0,e5_vide = 0,e6_vide = 0,e7_vide = 0,e8_vide = 0,e9_vide = 0,e10_vide = 0;
    int a=0,i;
    float result;

    if(tab[(int)((e1.angle_fin-e1.angle_debut)/2.0)] == -1){e1_vide = 1;}
    if(tab[(int)((e2.angle_fin-e2.angle_debut)/2.0)] == -1){e2_vide = 1;}
    if(tab[(int)((e3.angle_fin-e3.angle_debut)/2.0)] == -1){e3_vide = 1;}
    if(tab[(int)((e4.angle_fin-e4.angle_debut)/2.0)] == -1){e4_vide = 1;}
    if(tab[(int)((e5.angle_fin-e5.angle_debut)/2.0)] == -1){e5_vide = 1;}
    if(tab[(int)((e6.angle_fin-e6.angle_debut)/2.0)] == -1){e6_vide = 1;}
    if(tab[(int)((e7.angle_fin-e7.angle_debut)/2.0)] == -1){e7_vide = 1;}
    if(tab[(int)((e8.angle_fin-e8.angle_debut)/2.0)] == -1){e8_vide = 1;}
    if(tab[(int)((e9.angle_fin-e9.angle_debut)/2.0)] == -1){e9_vide = 1;}
    if(tab[(int)((e10.angle_fin-e10.angle_debut)/2.0)] == -1){e10_vide = 1;}

    e1_vide *= (e1.angle_fin-e1.angle_debut);
    e2_vide *= (e2.angle_fin-e2.angle_debut);
    e3_vide *= (e3.angle_fin-e3.angle_debut);
    e4_vide *= (e4.angle_fin-e4.angle_debut);
    e5_vide *= (e5.angle_fin-e5.angle_debut);
    e6_vide *= (e6.angle_fin-e6.angle_debut);
    e7_vide *= (e7.angle_fin-e7.angle_debut);
    e8_vide *= (e8.angle_fin-e8.angle_debut);
    e9_vide *= (e9.angle_fin-e9.angle_debut);
    e10_vide *= (e10.angle_fin-e10.angle_debut);

    printf("e1_vide %d\n",e1_vide);
    printf("e2_vide %d\n",e2_vide);
    printf("e3_vide %d\n",e3_vide);
    printf("e4_vide %d\n",e4_vide);
    printf("e5_vide %d\n",e5_vide);
    printf("e6_vide %d\n",e6_vide);
    printf("e7_vide %d\n",e7_vide);
    printf("e8_vide %d\n",e8_vide);
    printf("e9_vide %d\n",e9_vide);
    printf("e10_vide %d\n",e10_vide);


    for(i=0;i != 5;i++)
    {
        switch(a)
            {
                case 0:
                    {
                    if ((e1_vide > e2_vide )&&(e1_vide > e3_vide)&&(e1_vide > e4_vide)&&(e1_vide > e5_vide)&&(e1_vide > e6_vide )&&(e1_vide > e7_vide)&&(e1_vide > e8_vide)&&(e1_vide > e9_vide)&&(e1_vide > e10_vide))
                        {
                            result = 90.0-(e1.angle_fin + e1.angle_debut)/2.0;
                        }
                    else
                        {
                            a = 1;
                        }
                    break;
                    }
                case 1:
                    {
                    if ((e2_vide > e1_vide )&&(e2_vide > e3_vide)&&(e2_vide > e4_vide)&&(e2_vide > e5_vide)&&(e2_vide > e6_vide )&&(e2_vide > e7_vide)&&(e2_vide > e8_vide)&&(e2_vide > e9_vide)&&(e2_vide > e10_vide))
                        {
                            result = 90.0-(e2.angle_fin + e2.angle_debut)/2.0;
                        }
                    else
                        {
                            a = 2;
                        }
                    break;
                    }

                case 2:
                    {
                    if ((e3_vide > e1_vide )&&(e3_vide > e2_vide)&&(e3_vide > e4_vide)&&(e3_vide > e5_vide)&&(e3_vide > e6_vide )&&(e3_vide > e7_vide)&&(e3_vide > e8_vide)&&(e3_vide > e9_vide)&&(e3_vide > e10_vide))
                        {
                            result = 90.0-(e3.angle_fin + e3.angle_debut)/2.0;
                        }
                    else
                        {
                            a = 3;
                        }
                    break;
                    }

                case 3:
                    {
                    if ((e4_vide > e1_vide )&&(e4_vide > e2_vide)&&(e4_vide > e3_vide)&&(e4_vide > e5_vide))
                        {
                            result = 90.0-(e4.angle_fin + e4.angle_debut)/2.0;
                        }
                    else
                        {
                            a = 3;
                        }
                    break;
                    }
                case 4:
                    {
                    if ((e5_vide > e1_vide )&&(e5_vide > e2_vide)&&(e5_vide > e3_vide)&&(e5_vide > e4_vide))
                        {
                            result = (e5.angle_fin + e5.angle_debut)/2.0;
                        }
                    break;
                    }


            }
    }
    if (result < 85)
    {
        result =  90 - result;
    }
        if ((result >= 85)&&(result <= 95))
    {
        result = 0;
    }
        if (result > 95)
    {
        result =   result - 90 ;
    }
return result;
}